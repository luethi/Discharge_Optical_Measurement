[
  {
  "data_transfer":{
    "send_data_ftp": boolean
    "send_image_ftp": boolean
    "send_video_ftp": boolean
    "ftp_data": str(address,usr,pwd,subfolder)
    "ftp_image": str(address,usr,pwd,subfolder)
    "ftp_video": str(address,usr,pwd,subfolder)
    "send_to_discharge": boolean
    "send_data_period": int() seconds
    "send_image_period": int() seconds
    "send_video_period": int() seconds
    "ring_memory_period": int() days
    }
  "discharge_curve": {
    "model": "Q-h pairs"
    "parameters": [float(q1), float(h1), ..., float(qn, float(hn)]
    }
  "latitude": float()
  "longitude": float()
  "measurement_interval": int() seconds 		
  "path_wf": "/path/to/working_folder"
  "profile": {
    "free_params": [float(y1), float(y2), float(yn), float(z1), float(z2), float(zn)]
    "roughness": float()
    "type": "FREE"
    }
  "site_id":{
    "discharge_id": int()
    "discharge_keeper_id": str()
    "name": str()
    }
  "type": 1 (1=discharge station)
  }
  {
  "camera_parameters": {
    "position": [float(x), float(y), float(z)] (meters)
    "omega":[float(ang_x), float(ang_y), float(ang_z)], (radians)
    "focal_length": float() (meters)
    "distortion": [float(k1), float(k2)] (meters)
    "px_scale": float()  (meters)
    }
  "markers_coordinates_image": [float(i1), float(i2), float(in), float(j1), float(j2), float(jn)] (pixels)
  "video_name": "/path/to/movie/file"
  "fps": float() 
  "ip": str("ip,usr,pwd,camera_type")
  "markers_coordinates_world": [float(x1), float(x2), float(xn), float(y1), float(y2), float(yn), float(z1), float(z2), float(zn)] (meters)
  "markers_descriptors": {
    "scaling": 0
    } 
  "movie_length": float() (seconds)
  "parameters": [
    "calibration": {
      "position": [float(x), float(y), float(z)] (meters, measured camera position)
      "orientation": [float(ang_x), float(ang_y), float(ang_z)] (radians, measured camera orientation)
      "use_position": boolean
      "use_orientation": boolean
      "correct_distortion": boolean
      "pixel_scale": float() (meters)
      "distortion_boundaries":[ float(min_K1), float(max_K1), float(min_K1), float(max_K2)]
      "focal_boundaries":[float(min), float(max)] (meters)
      }
    "level": {
      "use_flow": boolean
      "use_integration": booelan
      "use_gradient": boolean
      "use_texture": boolean
      "use_mirror": boolean
      "x_boundaries": [float(min), float(max)] (meters)
      "z_boundaries": [float(min), float(max)] (meters)
      "dx": float() (meters)
      "dy": float() (meters)
      "filter_width": int()
      "roi_mirror": [float(x1),..., float(x4), float(y1),..., float(y4), float(z1),..., float(z4)] (meters)
      }
    "rotate": int()	(0=no rotation, -1=90o clockwise, 1=90o anti-clockwise, 2=180o)
    "velocity": {
      "win_size": [int(i), int(j)] (pixels)
      "win_offset": [int(i), int(j)] (pixels)
      "s2n": float()
      "apply_stack": boolean
      "apply_filter": boolean
      "weak_signal": boolean
      "exposure_time": int()
      "num_frames": int()
      "roi_velocity": [float(i1), ..., float(in), float(j1),..., float(jn)]
      }
    ]
    "pos_name": str() (camera postion name)
    "type": int()	(1=level, 2=velocity, 3=both)
  }
]
